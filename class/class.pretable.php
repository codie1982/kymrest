<?php/** * Description of class * * @author Engin EROL */class pretable extends table {    private $table_info = array();    private $table_source;    private $table_header = TRUE;    private $table_footer = TRUE;    private $table_row_count = 0;    private $show_item = 10;    private $start_item = 0;    private $end_item = 10;    private $total_item = 30;    private $table_key;    private $error_message = "";    private $control_class = "";    private $input = false;    private $random;    private $check_cloumb;    private $table_remove_button;    private $table_filters;    private $set_table_search_input;    private $set_table_refresh_button;    private $component_name;    private $multiple_search;    private $table_last_columb;    private $table_update = false;    private $table_button = array();    private $table_filter_info = array();    const NOT = "---";    public function __construct($source = [], $table_key) {        parent::__construct();        $this->table_source = $source;        //html::addbutton(["class" => "btn btn-danger", "title" => "Seçili Olanları Sil"]);        $this->table_button[] = html::addbutton([                    "class" => "btn btn-danger",                    "data-button" => "remove_button",                    "title" => "Seçili Olanları Sil",                    "tablekey" => $table_key,                    "data-component_run" => "product_form",                    "data-component_action" => "remove_all",                    "data-component_key" => "product_id",                    "data-component_data" => "",                        ], html::addspan(["class" => "fa fa-remove"]));        $this->set_table_key($this->settableuniq($table_key));    }    public function set_control_class($var) {        $this->control_class = $var;    }    public function set_component_name($val) {        $this->component_name = $val;    }    public function set_multiple_search($val) {        $this->multiple_search = $val;    }    public function set_error_message($var) {        $this->error_message = $var;    }    public function set_admin($var) {        $this->admin = $var;    }    public function set_show_item($var) {        $this->show_item = $var;    }    public function set_start_item($var) {        $this->start_item = $var;    }    public function set_end_item($var) {        $this->end_item = $var;    }    public function set_total_item($var) {        $this->total_item = $var;    }    public function set_table_key($var) {        $this->table_key = $var;    }    public function get_table_key() {        $this->table_key;    }    public function set_referans_id($val) {        $this->referans_id = $val;    }    public function set_table_row_count($var) {        $this->table_row_count = $var;    }    public function set_table_footer($var) {        $this->table_footer = $var;    }    public function set_table_header($var) {        $this->table_header = $var;    }    public function set_table_last_columb($var) {        $this->table_last_columb = $var;    }    public function set_check_cloumb($var) {        $this->table_checkboxes = $var;    }    public function set_table_remove_button($var) {        $this->table_remove_button = $var;    }    public function set_table_filters($var) {        $this->table_filters = $var;    }    public function add_table_filter($title, $icon, $control_function, $control_class = "") {        $this->table_filter_info[] = ["filter_title" => $title, "filter_icon" => $icon, "filter_control_class" => $control_class == "" ? $this->component_name : $control_class, "control_function" => $control_function];    }    public function set_table_search_input($var) {        $this->set_table_search_input = $var;    }    public function set_table_refresh_button($var) {        $this->set_table_refresh_button = $var;    }    public function set_table_update($val) {        $this->table_update = $val;    }    public function set_table_info($var = array()) {        $this->table_info = $var;    }    private function set_table_header_row() {        $col = [];        if ($this->table_remove_button) {            foreach ($this->table_button as $tbt) {                $tblb .= $tbt;            }            $col[] = ["1,1,1,1" => ["html" => $tblb]];        } else {            $col[] = ["1,1,1,1" => ["html" => ""]];        }        if ($this->table_filters) {            $fltr = $this->table_filter($this->table_filter_info);            $col[] = ["1,1,1,1" => ["html" => $fltr]];        } else {            $col[] = ["1,1,1,1" => ["html" => ""]];        }        if ($this->set_table_search_input) {            $col[] = ["4,4,4,4" => ["html" => $this->search_input($this->multiple_search)]];        } else {            $col[] = ["4,4,4,4" => ["html" => ""]];        }        if ($this->set_table_refresh_button) {            $col[] = ["4,4,4,4" => ["html" => $this->refresh_button()]];        } else {            $col[] = ["4,4,4,4" => ["html" => ""]];        }        return $col;    }    public function one_row() {        $source = [];        if (is_array($this->table_source))            if (!empty($this->table_source)) {                foreach ($this->table_source as $tb) {                    $source[] = $tb;                }            }        $count = count($source);        if (!empty($source)) {            foreach ($source as $src) {                $table_info = $this->table_info;                $t = 0;                $this->add_row_start(array("class" => "semi-bold"));                foreach ($table_info["cloumb"] as $clb) {                    $t++;                    $dispatch = new $this->control_class();                    $varible = $this->set_function($dispatch, $clb["function"], [$src, $random]);                    if (method_exists($dispatch, "style")) {                        $style = $this->set_function($dispatch, "style", [$src, $random]);                    } else {                        $style = "background-color:#ffffff";                    }                    $this->add_cloumb($varible, $clb["tbody_attr"], $clb["thead_title"], $table_info, $t, $clb["tbody_varible"], $style, $src);                }                $this->add_row_end();                $i++;            }        }        return $this->render(false);    }    public function add_table($echo = TRUE) {        if (!$this->table_update) {            $this->start($this->table_key);            $this->set_table_settting();            if ($this->table_header) {                $this->table_header($this->set_table_header_row());            }            $this->table_constructure_start();            $this->table_thead($this->table_info);        }        $this->start_table_body();        $source = [];        if (is_array($this->table_source))            if (!empty($this->table_source)) {                foreach ($this->table_source as $tb) {                    $source[] = $tb;                }            }        $count = count($source);        if (!empty($source)) {            $i = 0;            foreach ($source as $src) {                $random = rand(99999, 999999);                $this->add_row_start(array("class" => "semi-bold"));                $table_info = $this->table_info;                $t = 0;                foreach ($table_info["cloumb"] as $clb) {                    $t++;                    $dispatch = new $this->control_class();                    $varible = $this->set_function($dispatch, $clb["function"], [$src, $random]);                    if (method_exists($dispatch, "style")) {                        $style = $this->set_function($dispatch, "style", [$src, $random]);                    } else {                        $style = "background-color:#ffffff";                    }                    $this->add_cloumb($varible, $clb["tbody_attr"], $clb["thead_title"], $table_info, $t, $clb["tbody_varible"], $style, $src);                }                $this->add_row_end();                $i++;            }        } else {            $this->add_row_start(array("class" => "semi-bold"));            $table_info = $this->table_info;            $this->add_cloumb(null);            if (!empty($table_info))                foreach ($table_info["cloumb"] as $clb) {                    $i++;                    if ($i == 4) {                        if ($this->error_message == "") {                            $varible = "Listenizde Ekli herhangi bir veri bulunmamaktadır.";                        } else {                            $varible = $this->error_message;                        }                    } else {                        $varible = "";                    }                    $this->add_cloumb($varible, $clb["tbody_attr"], $table_info);                }            $this->add_row_end();        }        $this->end_table_body();        if (!$this->table_update) {            $this->table_constructure_end();        }        if (!$this->table_update) {            if ($this->table_footer) {                $footer_row = $this->make_table_footer($this->end_item, $this->start_item, $this->total_item, $this->show_item);                $this->table_footer($footer_row);            }        }        if (!$this->table_update) {            $this->end();        }        if ($echo) {            $this->render($echo);        } else {            return $this->render($echo);        }    }    private function set_function($dispatch, $method, $parameter) {        return call_user_func_array([$dispatch, $method], $parameter);    }}