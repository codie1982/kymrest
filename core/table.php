<?php/* *  * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. *  *//** * Description of class * * @author Engin EROL */class table {    private $table;    private $table_header_button;    private $table_header;    private $table_area = array();    private $title = array();    private $table_cloumb = array();    protected $company_id;    protected $users_user_id;    protected $admin = false;    protected $user_seccode;    protected $company_seccode;    protected $mobile_table = FALSE;    private $_html;    protected $_db;    protected $table_checkboxes = false;    protected $add_checkboxes = true;    private $table_uniq;    const background_normal = "normal";    const background_waiting = "waiting";    public function __construct() {        $this->_html = html::getInstance();// $detect = new mobile_detect();//        if ($detect->isMobile()) {//            $this->mobile_table = TRUE;//        } else {//            $this->mobile_table = FALSE;//        }        $this->mobile_table = FALSE;    }    protected function settableuniq($secret_number = null) {        if (is_null($secret_number))            return $this->table_uniq = uniqid();        return $this->table_uniq = $secret_number;    }    public function set_user_id($val) {        return $this->users_user_id = $val;    }    public function set_user_seccode($val) {        return $this->user_seccode = $val;    }    public function set_admin($val) {        return $this->admin = $val;    }    public function set_company_id($val) {        return $this->company_id = $val;    }    public function set_company_seccode($val) {        if ($val == "") {            $val = "-1";        }        return $this->company_seccode = $val;    }    public function set_table_empyt() {        $this->table = "";    }    public function set_table_title($val = array()) {        return $this->title = $val;    }    public function set_table_cloumb($val = array()) {        return $this->table_cloumb = $val;    }    public function start($table_key) {        if ($this->mobile_table) {            $this->table .= '<div class="shadow bg-white padding-20">';        } else {            $this->table .= '<div id="' . $table_key . '" class="table-responsive shadow" style="overflow:inherit">';        }    }    public function table_filter($table_filter_info) {        $li = [];        if (!empty($table_filter_info))            foreach ($table_filter_info as $info) {                if ($info["filter_icon"] !== "") {                    $ht = html::addspan(["class" => $info["filter_icon"], ""]) . " " . $info["filter_title"];                } else {                    $ht = $info["filter_title"];                }                $li[] = ["html" =>                    html::addalink(["tablekey" => $this->table_uniq, "href" => "javascript:;", "table-filter" => $info["control_function"], "control_class" => $info["filter_control_class"], "control_function" => $info["control_function"]], $ht)                ];            }        $filter_list = html::addhtmllist(["class" => "dropdown-menu"], $li);        $filter_text = '<i class="fa fa-user"></i> Filtreler<i class="fa fa-angle-down"></i>';        $green = html::addalink(["class" => "btn green", "href" => "javascript:;", "data-toggle" => "dropdown", "ara-expanded" => "false"], $filter_text);        $green .= $filter_list;        $btngroup = html::add_div(["class" => "btn-group"], $green);        $toolbar = html::add_div(["class" => "btn-toolbar"], $btngroup);        return $toolbar;    }    public function search_input($mlt) {        if ($mlt) {            $multiple = "multiple";        } else {            $multiple = "";        }        return '<select class="form-control" table-key="' . $this->table_uniq . '" data-table="search_input" ' . $multiple . ' ></select>';    }    public function refresh_button() {        return '<button class="btn btn-info" tablekey="' . $this->table_uniq . '" table-action="refresh"  data-table="refresh"><span class="fa fa-refresh"></span> Yenile</button>';    }    public function table_header($table_row) {        if ($this->mobile_table) {            $this->table .= "";        } else {            $this->table .= $this->_html->add_div(["class" => "table-header"], html::addrow($table_row));        }    }    public function table_filter_area() {        $this->table .= '<div data-services_table="search_area" class="row no-margin no-padding" style="display:none;">';        $this->table .= '<div class="col-sm-12  border  ">';        $this->table .= '<div class="input-group  "><input type="text" class="no-border no-border-radius  form-control" /><span class="input-group-addon bg-transparent no-border no-border-radius"><i class="fas fa-search"></i></span></div>';        $this->table .= '<ul class="list-inline ">            <li class="pointer m-t-10 ">' . $this->_html->addspan(["class" => "tag label label-info text-white m-l-5"], "servis sınıfı") . '</li>            <li class="pointer m-t-10">' . $this->_html->addspan(["class" => "tag label label-info text-white m-l-5"], "servis sınıfı") . '</li>            <li class="pointer m-t-10">' . $this->_html->addspan(["class" => "tag label label-info text-white m-l-5"], "servis sınıfı") . '</li>            </ul>';        $this->table .= '</div>';        $this->table .= '</div>';    }    public function table_thead($table_info, $check_cloumb = false) {        if ($this->mobile_table) {                    } else {            $this->table .= '<thead>';            $this->table .= '<tr>';            if ($this->table_checkboxes) {                $rnd = rand(999, 9999);                $this->table .= '<th style="width:3%;font-size:12px;" class="v-align-middle text-left" title="seçilebilir"><label class="mt-checkbox mt-checkbox-single mt-checkbox-outline" for="' . $rnd . '"><input type="checkbox" class="checkboxes" tablekey="' . $this->table_uniq . '" data-table="allchecked" value="1" id="' . $rnd . '"><span></span></label></th>';            }            $cloumbs = $table_info["cloumb"];            if (!empty($cloumbs))                foreach ($cloumbs as $cloumb) {                    $this->table .= '<th ';                    if (!empty($cloumb["thead_attr"])) {                        foreach ($cloumb["thead_attr"] as $key => $value) {                            $this->table .= ' ' . $key . '="' . $value . '"' . ' ';                        }                    }                    $this->table .= ' >' . $cloumb["thead_title"] . '</th>';                }            $this->table .= '</tr>';            $this->table .= '</thead>';        }    }    public function start_table_body() {        $this->table .= '<tbody id="tbody">';    }    public function set_table_settting() {        $this->table .= '<input type="hidden" table-key="' . $this->table_uniq . '" name="table_settings" value="" />';    }    public function end_table_body() {        $this->table .= '</tbody>';    }    public function add_row_start($attr = array()) {        if ($this->mobile_table) {            $this->table .= '<div class="border-5 m-t-5">';        } else {            $this->table .= '<tr';            if (!empty($attr)) {                foreach ($attr as $key => $attr) {                    $this->table .= ' ' . $key . '="' . $attr . '"' . ' ';                }            }            $this->table .= '> ';        }    }    public function add_row_end() {        if ($this->mobile_table) {            $this->table .= '</div>';        } else {            $this->table .= '</tr>';        }    }    public function add_cloumb($varible, $attr = array(), $table_title = "", $table_info = array(), $i = 0, $tbody_varible = "", $style = [], $src = array()) {        if ($this->mobile_table) {            if ($table_title != "#") {                $td .= $this->_html->addstrong(NULL, $table_title);                $td .= $this->_html->add_div(["class" => "border-bottom"]);                $td .= $this->_html->addrow([["12,12,12,12" => ["html" => $varible, "class" => "m-t-10"]]]);                $this->table .= $this->_html->add_div(["class" => "border-right border-left padding-10", "style" => $style], $td);            }        } else {            if ($this->table_checkboxes) {                if ($i == 1) {                    $rnd = rand(999, 9999);                    $this->table .= html::add_td([                                "class" => "v-align-middle semi-bold text-center",                                "data-tdvarible" => $tbody_varible,                                "style" => $style,                                    ], html::addlabel(                                            [                                                "class" => "mt-checkbox mt-checkbox-single mt-checkbox-outline",                                                "for" => $rnd                                            ], html::addinput(                                                    [                                                        "class" => "checkboxes",                                                        "value" => 1,                                                        "tablekey" => $this->table_uniq,                                                        "primarykey" => $src["table_id"],                                                    ], $rnd, "checkbox") . html::addspan([], ""))                    );                }            }            $attr["data-tdvarible"] = $tbody_varible;            $attr["style"] = $style;            $this->table .= html::add_td($attr, $varible);        }    }    public function table_constructure_start() {        if ($this->mobile_table) {                    } else {            $this->table .= '<table class="table table-striped table-bordered table-hover table-checkable order-column" >';        }    }    public function table_constructure_end() {        if ($this->mobile_table) {                    } else {            $this->table .= '</table>';        }    }    public function make_table_footer($end_item, $start_item, $total_item, $show_item) {        $per = $end_item - $start_item;        if ($total_item != "") {            $show_item_r = ceil($total_item / $per);        } else {            $show_item_r = 0;        }        $option = '<option value="---">Gösterim Sayısı</option>';        $button = '';        for ($i = 1; $i <= $show_item_r; $i++) {            if ($show_item == $i * $per) {                $selected = "selected";            } else {                $selected = "";            }            $option .= '<option value="' . $i * $per . '" ' . $selected . '>' . $i * $per . '</option>';//   $button .= '<button type="button" class="btn btn-default ' . $active . '" table-page="' . $i . '">' . $i . '</button>';        }        $i = 0;        $page_count = ceil($total_item / $show_item);        $activepage = floor(($start_item + $show_item) / $show_item);        if ($page_count > 6) {            $active = 'blue';            $activeClass1 = $activepage == 1 ? $active : "";            $activeClass2 = $activepage == 2 ? $active : "";            if (intval($activepage - 1) < 1) {//  $button .= '<button type="button" class="btn btn-default " table-page="1">1</button>';            } else {                if (intval($activepage - 2) > 2) {                    $button .= '<button type="button" class="btn btn-default" tablekey="' . $this->table_uniq . '" table-page="' . intval($activepage - 2) . '">' . intval($activepage - 2) . '</button>';                    $button .= '<button type="button" class="btn btn-default"  tablekey="' . $this->table_uniq . '" table-page="' . intval($activepage - 1) . '">' . intval($activepage - 1) . '</button>';                } else {                    $button .= '<button type="button" class="btn btn-default"  tablekey="' . $this->table_uniq . '" table-page="' . intval($activepage - 1) . '">' . intval($activepage - 1) . '</button>';                }            }            $button .= '<button type="button" class="btn btn-default ' . $active . '  tablekey="' . $this->table_uniq . '" " table-page="' . intval($activepage - 0) . '">' . intval($activepage - 0) . '</button>';            if ($activepage == $page_count) {                            } else {                if (intval($activepage + 1) >= $page_count) {                    $button .= '<button type="button" class="btn btn-default "  tablekey="' . $this->table_uniq . '" table-page="' . $page_count . '">' . $page_count . '</button>';                } else {                    if (intval($activepage + 2) >= $page_count) {                        $button .= '<button type="button" class="btn btn-default"  tablekey="' . $this->table_uniq . '"  table-page="' . intval($activepage + 1) . '">' . intval($activepage + 1) . '</button>';                        $button .= '<button type="button" class="btn btn-default"  tablekey="' . $this->table_uniq . '" table-page="' . intval($activepage + 2) . '">' . intval($activepage + 2) . '</button>';                    } else {                        $button .= '<button type="button" class="btn btn-default"  tablekey="' . $this->table_uniq . '" table-page="' . intval($activepage + 1) . '">' . intval($activepage + 1) . '</button>';                    }                }            }        } else {            for ($i = 1; $i <= $page_count; $i++) {                if ($activepage == $i) {                    $active = "blue";                } else {                    $active = "";                }                $button .= '<button type="button" class="btn btn-default ' . $active . '" tablekey="' . $this->table_uniq . '" table-page="' . $i . '">' . $i . '</button>';            }        }        $show_page_option = '<option value="---">Sayfa NO</option>';        for ($j = 0; $j < $page_count; $j++) {            $pageno = $j + 1;            if ($activepage == $pageno) {                $page_selected = "selected";            } else {                $page_selected = "";            }            $show_page_option .= '<option value="' . $pageno . '" ' . $page_selected . '>' . $pageno . '</option>';        }        $footer_row = ' <div class="row">                            <div class="col-sm-4"></div>                            <div class="col-sm-3">Toplam <strong>' . $page_count . '</strong> sayfada <strong>' . $total_item . '</strong> kayıt listeleniyor. Sayfa <strong>' . $activepage . '</strong> </div>                            <div class="col-sm-1"><select class="bs-select form-control"  tablekey="' . $this->table_uniq . '" table-control="show_item">' . $option . '</select></div>                            <div class="col-sm-3">                             <div class="btn-toolbar margin-bottom-10"  tablekey="' . $this->table_uniq . '" table-control="page_number">                                    <div class="btn-group">                                        <button type="button" class="btn btn-default"  tablekey="' . $this->table_uniq . '" table-page="first"><span class="fa fa-angle-double-left"></span></button>                                    </div>                                    <div class="btn-group">' . $button . '</div>                                    <div class="btn-group">                                         <button type="button" class="btn btn-default"  tablekey="' . $this->table_uniq . '" table-page="last"><span class="fa fa-angle-double-right"></span></button>                                    </div>                                </div>                            </div>                     <div class="col-sm-1"><select class="bs-select form-control"  tablekey="' . $this->table_uniq . '" table-control="selected_page">' . $show_page_option . '</select></div>                             </div>';        return $footer_row;    }    public function table_footer($footer_html) {        $this->table .= '<div class="table-footer bg-white">';        $this->table .= $footer_html;        $this->table .= '</div>';    }    public function table_pagination() {            }    public function end() {        $this->table .= '</div>';    }    public function render($echo = TRUE) {        if ($echo) {            echo $this->table;        } else {            return $this->table;        }    }}